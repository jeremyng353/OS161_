diff a/kern/syscall/runprogram.c b/kern/syscall/runprogram.c	(rejected hunks)
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2014
  *	The President and Fellows of Harvard College.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -36,16 +36,83 @@
 #include <types.h>
 #include <kern/errno.h>
 #include <kern/fcntl.h>
+#include <kern/unistd.h>
 #include <lib.h>
 #include <proc.h>
 #include <current.h>
 #include <addrspace.h>
 #include <vm.h>
 #include <vfs.h>
+#include <openfile.h>
+#include <filetable.h>
 #include <syscall.h>
 #include <test.h>
 
 /*
+ * Open a file on a selected file descriptor. Takes care of various
+ * minutiae, like the vfs-level open destroying pathnames.
+ */
+static
+int
+placed_open(const char *path, int openflags, int fd)
+{
+	struct openfile *newfile, *oldfile;
+	char mypath[32];
+	int result;
+
+	/*
+	 * The filename comes from the kernel, in fact right in this
+	 * file; assume reasonable length. But make sure we fit.
+	 */
+	KASSERT(strlen(path) < sizeof(mypath));
+	strcpy(mypath, path);
+
+	result = openfile_open(mypath, openflags, 0664, &newfile);
+	if (result) {
+		return result;
+	}
+
+	/* place the file in the filetable in the right slot */
+	filetable_placeat(curproc->p_filetable, newfile, fd, &oldfile);
+
+	/* the table should previously have been empty */
+	KASSERT(oldfile == NULL);
+
+	return 0;
+}
+
+/*
+ * Open the standard file descriptors: stdin, stdout, stderr.
+ *
+ * Note that if we fail part of the way through we can leave the fds
+ * we've already opened in the file table and they'll get cleaned up
+ * by process exit.
+ */
+static
+int
+open_stdfds(const char *inpath, const char *outpath, const char *errpath)
+{
+	int result;
+
+	result = placed_open(inpath, O_RDONLY, STDIN_FILENO);
+	if (result) {
+		return result;
+	}
+
+	result = placed_open(outpath, O_WRONLY, STDOUT_FILENO);
+	if (result) {
+		return result;
+	}
+
+	result = placed_open(errpath, O_WRONLY, STDERR_FILENO);
+	if (result) {
+		return result;
+	}
+
+	return 0;
+}
+
+/*
  * Load program "progname" and start running it in usermode.
  * Does not return except on error.
  *
@@ -68,6 +135,21 @@
 	/* We should be a new process. */
 	KASSERT(proc_getas() == NULL);
 
+	/* Set up stdin/stdout/stderr if necessary. */
+	if (curproc->p_filetable == NULL) {
+		curproc->p_filetable = filetable_create();
+		if (curproc->p_filetable == NULL) {
+			vfs_close(v);
+			return ENOMEM;
+		}
+
+		result = open_stdfds("con:", "con:", "con:");
+		if (result) {
+			vfs_close(v);
+			return result;
+		}
+	}
+
 	/* Create a new address space. */
 	as = as_create();
 	if (as == NULL) {
